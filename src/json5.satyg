@require: base/list-ext
@require: base/string
@require: base/char
@require: base/int
@require: base/float
@require: base/result
@require: base/parser

type json5 =
  | Json5Null
  | Json5Bool of bool
  | Json5Int of int
  | Json5Float of float
  | Json5NaN
  | Json5Infinity
  | Json5NegInfinity
  | Json5String of string
  | Json5Array of json5 list
  | Json5Object of (string * json5) list

type json5-token-kind =
  | Json5TokenKindValue of string
  | Json5TokenKindString of string
  | Json5TokenKindInt of int
  | Json5TokenKindFloat of float
  | Json5TokenKindNaN
  | Json5TokenKindInfinity
  | Json5TokenKindNegInfinity
  | Json5TokenKindTrue
  | Json5TokenKindFalse
  | Json5TokenKindNull
  | Json5TokenKindComma
  | Json5TokenKindColon
  | Json5TokenKindLeftCurlyBracket
  | Json5TokenKindRightCurlyBracket
  | Json5TokenKindLeftSquareBracket
  | Json5TokenKindRightSquareBracket

type json5-token = json5-token-kind Token.t


type json5-parse-error = (|
  token: json5-token option;
  desc: string
|)

module JSON5 : sig

  val parse : string -> json5 json5-parse-error result
  val to-string : json5 -> string

  val is-null : json5 -> bool
  val is-bool : json5 -> bool
  val as-bool : json5 -> bool option
  val is-int : json5 -> bool
  val as-int : json5 -> int option
  val is-float : json5 -> bool
  val as-float : json5 -> float option
  val is-nan : json5 -> bool
  val is-infinity : json5 -> bool
  val is-neg-infinity : json5 -> bool
  val is-string : json5 -> bool
  val as-string : json5 -> string option
  val is-array : json5 -> bool
  val as-array : json5 -> (json5 list) option
  val is-object : json5 -> bool
  val as-object : json5 -> ((string * json5) list) option

end = struct


let new-line-position position =
  (|
    line = position#line + 1;
    column = 0;
  |)

let plus1-position position =
  (|
    line = position#line;
    column = position#line + 1;
  |)

let plus-column-position column position =
  (|
    line = position#line;
    column = position#line + column
  |)

let plus-position line column position =
  (|
    line = position#line + line;
    column = position#line + column
  |)


let is-unicode-hex unicode =
  ((unicode >= 0x0030) && (0x0039 >= unicode)) ||
  ((unicode >= 0x0041) && (0x0046 >= unicode)) ||
  ((unicode >= 0x0061) && (0x0066 >= unicode))


let-rec lex-string is-single str-stack line column unicode-lst =
  match unicode-lst with
  | [] -> None
  | x::xs -> (
    match x with
    | 0x0027 -> (% u0027 == '
      if is-single then
        Some((str-stack, line, column + 1, xs))
      else
        lex-string is-single (str-stack^`'`) line (column + 1) xs
    )
    | 0x0022 -> (% u0022 == "
      if is-single then
        lex-string is-single (str-stack^`"`) line (column + 1) xs
      else
        Some((str-stack, line, column + 1, xs))
    )
    | 0x005C -> (% u005C == \
      match xs with
      | [] -> None
      | y::ys -> (
        match y with
        | 0x000A -> lex-string is-single str-stack (line + 1) 0 ys % LF
        | 0x000D -> (% CR
          match ys with
          | 0x000A::zs -> lex-string is-single str-stack (line + 1) 0 zs
          | _ -> lex-string is-single str-stack (line + 1) 0 ys
        )
        | 0x0022 -> lex-string is-single (str-stack^`"`) line (column + 2) ys
        | 0x005C -> lex-string is-single (str-stack^`\`) line (column + 2) ys
        | 0x002F -> lex-string is-single (str-stack^`/`) line (column + 2) ys
        | 0x0062 -> lex-string is-single (str-stack^(string-unexplode [0x0008])) line (column + 2) ys % \b backspace
        | 0x0066 -> lex-string is-single (str-stack^(string-unexplode [0x000C])) line (column + 2) ys % \f formfeed
        | 0x006E -> lex-string is-single (str-stack^(string-unexplode [0x000A])) line (column + 2) ys % \n linefeed
        | 0x0072 -> lex-string is-single (str-stack^(string-unexplode [0x000D])) line (column + 2) ys % \r carriage return
        | 0x0074 -> lex-string is-single (str-stack^(string-unexplode [0x0009])) line (column + 2) ys % \t horizontal tab
        | 0x0075 -> (% \u
          match ys with
          | z1::z2::z3::z4::zs when is-unicode-hex z1 && is-unicode-hex z2 && is-unicode-hex z3 && is-unicode-hex z4 -> (
            let hex-str = string-unexplode [z1;z2;z3;z4] in
            let hex-opt = Int.of-string-opt ?:(16) hex-str in
            match hex-opt with
            | None -> None
            | Some(hex) -> (
              let str = string-unexplode [hex] in
              lex-string is-single (str-stack^str) line (column + 6) zs
            )
          )
          | _ -> None
        )
        | _ -> None
      )
    )
    | 0x000A -> lex-string is-single (str-stack ^ (string-unexplode[0x000A])) (line + 1) 0 xs
    | _ -> lex-string is-single (str-stack ^ (string-unexplode[x])) line (column + 1) xs
  )



let-rec lex-line-comment position unicode-lst =
  match unicode-lst with
  | [] -> (position,[])
  | 0x000A::xs -> (new-line-position position,xs) % LF
  | x::xs -> lex-line-comment (plus1-position position) xs


let-rec lex-block-comment position unicode-lst =
  match unicode-lst with
  | [] -> (position,[])
  | 0x002A::0x002F::xs -> (plus-column-position 2 position,xs)% */
  | 0x000A::xs -> lex-block-comment (new-line-position position) xs% LF
  | x::xs -> lex-block-comment (plus1-position position) xs


let-rec lex-value str-stack-lst column unicode-lst =
  match unicode-lst with
  | [] -> (string-unexplode (List.reverse str-stack-lst), column, [])
  | x::xs -> (
    match x with
    | x when (x |> Char.of-codepoint |> Char.is-alpha || x == 0x0024 || x == 0x005F) -> (
      lex-value (x::str-stack-lst) (column + 1) xs
    )
    | _ -> (string-unexplode (List.reverse str-stack-lst), column, x::xs)
  )


let-rec exp-int-plus n exp =
  if exp <= 0 then
    n
  else
    exp-int-plus (n * 10) (exp - 1)

let-rec exp-float-plus n exp =
  if exp <= 0 then
    n
  else
    exp-float-plus (n *. 10.0) (exp - 1)

let-rec exp-minus n exp =
  if exp <= 0 then
    n
  else
    exp-minus (n /. 10.0) (exp - 1)


let-rec stack-hex stack-lst column unicode-lst =
  match unicode-lst with
  | [] -> (List.reverse stack-lst, column, [])
  | x::xs -> (
    if x |> Char.of-codepoint |> Char.is-hex-digit then
      stack-hex (x::stack-lst) (column + 1) xs
    else
      (List.reverse stack-lst, column, x::xs)
  )

let-rec stack-digit stack-lst column unicode-lst =
  match unicode-lst with
  | [] -> (List.reverse stack-lst, column, [])
  | x::xs -> (
    if x |> Char.of-codepoint |> Char.is-digit then
      stack-digit (x::stack-lst) (column + 1) xs
    else
      (List.reverse stack-lst, column, x::xs)
  )

let lex-number is-plus is-hex position unicode-lst =
  if is-hex then
    let (digit-lst, column, lst) = stack-hex [] 0 unicode-lst in
    let n-opt = Int.of-string-opt ?:(16) (string-unexplode digit-lst) in
    match n-opt with
    | None -> None
    | Some(n) -> (
      let n =
        if is-plus then
          n
        else
          n * (-1)
      in
      let new-position = plus-column-position column position in
      Some(Token.make (Json5TokenKindInt(n)) new-position, new-position, lst)
    )
  else
    let (digit-lst, column, lst) = stack-digit [] 0 unicode-lst in
    match lst with
    | 0x002E::ys -> (% 0x002E == '.' 末尾が小数点だけなら`0`をつけておく
      let (digit-lst-2, column2, lst) = stack-digit [] 0 ys in
      let digit-lst-2 =
        if List.length digit-lst-2 == 0 then
          [0x0030] % `0`
        else
          digit-lst-2
      in
      let stack = List.concat [digit-lst; [0x002E]; digit-lst-2] in
      let float-opt =
        string-unexplode stack
        |> Float.of-string-opt
      in
      let float-opt =
        if is-plus then
          float-opt
        else
          float-opt |> Option.map Float.neg
      in
      match lst with
      | z1::z2::zs when z1 == 0x0045 || z1 == 0x0065 -> (% 指数表記をする
        let (digit-lst-3, column3, lst) =
          if z2 == 0x002D || z2 == 0x002B then
            stack-digit [] 0 zs
          else
            stack-digit [] 0 (z2::zs)
        in
        let new-position =
          plus-column-position (column + 1 + column2 + 1 + column3) position
        in
        let is-exp-plus =
          not (z2 == 0x002D)
        in
        let n-opt = Int.of-string-opt (string-unexplode digit-lst) in
        let exp-opt = Int.of-string-opt (string-unexplode digit-lst-3) in
        match (n-opt, exp-opt, float-opt) with
        | (Some(n), Some(exp), Some(float)) -> (
          let int =
            if is-plus then
              n
            else
              n * (-1)
          in
          if is-exp-plus then
            let fl = exp-float-plus float exp in
            Some(Token.make (Json5TokenKindFloat(fl)) new-position, new-position, lst)
          else
            let fl = exp-minus float exp in
            Some(Token.make (Json5TokenKindFloat(fl)) new-position, new-position, lst)
        )
        | _ -> None
      )
      | _ -> (% 指数表記をしない
        match float-opt with
        | None -> None
        | Some(float) -> (
          let new-position = plus-column-position (column + 1 + column2) position in
          Some(Token.make (Json5TokenKindFloat(float)) new-position, new-position, lst)
        )
      )
    )
    | y1::y2::ys when y1 == 0x0045 || y1 == 0x0065 -> (
      let (digit-lst-2, column2, lst) =
        if y2 == 0x002D || y2 == 0x002B then
          stack-digit [] 0 ys
        else
          stack-digit [] 0 (y2::ys)
      in
      let new-position = plus-column-position (column + 1 + column2) position in
      let is-exp-plus =
        not (y2 == 0x002D)
      in
      let n-opt = Int.of-string-opt (string-unexplode digit-lst) in
      let exp-opt = Int.of-string-opt (string-unexplode digit-lst-2) in
      match (n-opt, exp-opt) with
      | (Some(n), Some(exp)) -> (
        let int =
          if is-plus then
            n
          else
            n * (-1)
        in
        if is-exp-plus then
          let n = exp-int-plus int exp in
          Some(Token.make (Json5TokenKindInt(n)) new-position, new-position, lst)
        else
          let fl = exp-minus (float int) exp in
          Some(Token.make (Json5TokenKindFloat(fl)) new-position, new-position, lst)
      )
      | _ -> None
    )
    | _ -> (
      let new-position = plus-column-position column position in
      let n-opt = Int.of-string-opt (string-unexplode digit-lst) in
      match n-opt with
      | None -> None
      | Some(n) -> (
        let int =
          if is-plus then
            n
          else
            n * (-1)
        in
        Some(Token.make (Json5TokenKindInt(int)) new-position, new-position, lst)
      )
    )


% token list -> token-position -> int list -> (token Token.t) list
let-rec lex token-lst position unicode-lst =
  match unicode-lst with
  | [] -> Some(List.reverse token-lst)
  | x::xs -> (
    match x with
    | 0x002C -> (% ,
      lex
        ((Token.make Json5TokenKindComma (plus1-position position)) :: token-lst)
        (plus1-position position)
        xs
    )
    | 0x003A -> (% :
      lex
        ((Token.make Json5TokenKindColon (plus1-position position)) :: token-lst)
        (plus1-position position)
        xs
    )
    | 0x007B -> (% {
      lex
        ((Token.make Json5TokenKindLeftCurlyBracket (plus1-position position)) :: token-lst)
        (plus1-position position)
        xs
    )
    | 0x007D -> (% }
      lex
        ((Token.make Json5TokenKindRightCurlyBracket (plus1-position position)) :: token-lst)
        (plus1-position position)
        xs
    )
    | 0x005B -> (% [
      lex
        ((Token.make Json5TokenKindLeftSquareBracket (plus1-position position)) :: token-lst)
        (plus1-position position)
        xs
    )
    | 0x005D -> (% ]
      lex
        ((Token.make Json5TokenKindRightSquareBracket (plus1-position position)) :: token-lst)
        (plus1-position position)
        xs
    )
    | 0x0027 -> (% '
      match lex-string true String.empty 0 0 xs with
      | None -> None
      | Some((str, line, column, lst)) -> (
        let new-position = plus-position line column position in
        lex ((Token.make (Json5TokenKindString(str)) new-position) :: token-lst) new-position lst
      )
    )
    | 0x0022 -> (% "
      match lex-string false String.empty 0 0 xs with
      | None -> None
      | Some((str, line, column, lst)) -> (
        let new-position = plus-position line column position in
        lex ((Token.make (Json5TokenKindString(str)) new-position) :: token-lst) new-position lst
      )
    )
    | 0x002F -> (% /
      match xs with
      | [] -> None
      | y::ys -> (
        match y with
        | 0x002F -> (% /
          let (new-position, lst) = lex-line-comment position ys in
          lex token-lst new-position lst
        )
        | 0x002A -> (% *
          let (new-position, lst) = lex-block-comment position ys in
          lex token-lst new-position lst
        )
        | _ -> None
      )
    )
    | 0x000A -> (% LineFeed \n
      lex
        token-lst
        (new-line-position position)
        xs
    )
    | 0x0009 -> (% Horizontal Tab \t
      lex
        token-lst
        (plus1-position position)
        xs
    )
    | 0x0020 -> (% space
      lex
        token-lst
        (plus1-position position)
        xs
    )
    | 0x000D -> (% carriage return CR \r
      lex
        token-lst
        (plus1-position position)
        xs
    )
    | x when (x |> Char.of-codepoint |> Char.is-alpha || x == 0x0024 || x == 0x005F) -> (
      let (str, column, lst) = lex-value [] 0 (x::xs) in
      let new-position = plus-column-position column position in
      match str with
      | `true` -> lex ((Token.make Json5TokenKindTrue new-position) :: token-lst) new-position lst
      | `false` -> lex ((Token.make Json5TokenKindFalse new-position) :: token-lst) new-position lst
      | `null` -> lex ((Token.make Json5TokenKindNull new-position) :: token-lst) new-position lst
      | `NaN` -> lex ((Token.make Json5TokenKindNaN new-position) :: token-lst) new-position lst
      | `Infinity` -> lex ((Token.make Json5TokenKindInfinity new-position) :: token-lst) new-position lst
      | _ -> lex ((Token.make (Json5TokenKindValue(str)) new-position) :: token-lst) new-position lst
    )
    | 0x002D -> (% '-'
      match xs with
      | 0x0049::0x006E::0x0066::0x0069::0x006E::0x0069::0x0074::0x0079::ys -> (
        let new-position = plus-column-position 8 position in
        lex ((Token.make Json5TokenKindNegInfinity new-position) :: token-lst) new-position ys
      )
      | 0x002E::ys -> (% .
        match lex-number false false position (List.append (string-explode `0.`) ys) with
        | None -> None
        | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
      )
      | 0x0030::ys -> (% 0
        match ys with
        | 0x0058::zs -> (% X
          match lex-number false true position zs with
          | None -> None
          | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
        )
        | 0x0078::zs -> (% x
          match lex-number false true position zs with
          | None -> None
          | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
        )
        | _ -> (% other
          match lex-number false true position ys with
          | None -> None
          | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
        )
      )
      | y::ys when y |> Char.of-codepoint |> Char.is-digit -> (
        match lex-number false false position xs with
        | None -> None
        | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
      )
      | _ -> None
    )
    | 0x002B -> (% '+'
      match xs with
      | 0x0049::0x006E::0x0066::0x0069::0x006E::0x0069::0x0074::0x0079::ys -> (
        let new-position = plus-column-position 8 position in
        lex ((Token.make Json5TokenKindInfinity new-position) :: token-lst) new-position ys
      )
      | 0x002E::ys -> (% .
        match lex-number true false position (List.append (string-explode `0.`) ys) with
        | None -> None
        | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
      )
      | 0x0030::ys -> (% 0
        match ys with
        | 0x0058::zs -> (% X
          match lex-number true true position zs with
          | None -> None
          | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
        )
        | 0x0078::zs -> (% x
          match lex-number true true position zs with
          | None -> None
          | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
        )
        | y::ys when y |> Char.of-codepoint |> Char.is-digit -> (
          match lex-number false false position xs with
          | None -> None
          | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
        )
        | _ -> None
      )
      | _ -> (
        match lex-number true false position xs with
        | None -> None
        | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
      )
    )
    | 0x002E -> (% .
      match lex-number true false position (List.append (string-explode `0.`) xs) with
      | None -> None
      | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
    )
    | 0x0030 -> (% 0
      match xs with
      | 0x0058::ys -> (% X
        match lex-number true true position ys with
        | None -> None
        | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
      )
      | 0x0078::ys -> (% x
        match lex-number true true position ys with
        | None -> None
        | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
      )
      | _ -> (% other
        match lex-number true true position xs with
        | None -> None
        | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
      )
    )
    | x when x |> Char.of-codepoint |> Char.is-digit -> (
      match lex-number true false position (x::xs) with
      | None -> None
      | Some(number, new-position, lst) -> lex (number :: token-lst) new-position lst
    )
    | _ -> None
  )


let-rec parse-array stack token-lst =
  match token-lst with
  | [] -> Err((|token = None; desc = `eof`;|))
  | x::xs -> (
    match Token.data x with
    | Json5TokenKindRightSquareBracket -> Ok(Json5Array(List.reverse stack), xs)
    | _ -> (
      match parse-value (x::xs) with
      | Err(e) -> Err(e)
      | Ok(value, lst) -> (
        match lst with
        | [] -> Err((|token = None; desc = `eof`;|))
        | [y] -> (
          match Token.data y with
          | Json5TokenKindRightSquareBracket -> Ok(Json5Array(List.reverse (value::stack)), [])
          | _ -> Err((|token = Some(y); desc = `unexpected token`;|))
        )
        | y1::y2::ys -> (
          match (Token.data y1, Token.data y2) with
          | (Json5TokenKindRightSquareBracket,_) -> Ok(Json5Array(List.reverse (value::stack)), y2::ys)
          | (Json5TokenKindComma,Json5TokenKindRightSquareBracket) -> Ok(Json5Array(List.reverse (value::stack)), ys)
          | (Json5TokenKindComma,_) -> parse-array (value::stack) (y2::ys)
          | _ -> Err((|token = Some(y1); desc = `unexpected token`;|))
        )
      )
    )
  )


and parse-object stack token-lst =
  match token-lst with
  | [] -> Err((|token = None; desc = `eof`;|))
  | x::xs -> (
    match Token.data x with
    | Json5TokenKindRightCurlyBracket -> Ok(Json5Object(List.reverse stack), xs)
    | _ -> (
      match x::xs with
      | y1::y2::ys -> (
        match (Token.data y1, Token.data y2) with
        | (Json5TokenKindString(tag), Json5TokenKindColon) -> (
          match parse-value ys with
          | Err(e) -> Err(e)
          | Ok(value, lst) -> (
            match lst with
            | [] -> Err((|token = None; desc = `eof`;|))
            | [y] -> (
              match Token.data y with
              | Json5TokenKindRightCurlyBracket -> Ok(Json5Object(List.reverse ((tag,value)::stack)), [])
              | _ -> Err((|token = Some(y); desc = `unexpected token`;|))
            )
            | y1::y2::ys -> (
              match (Token.data y1, Token.data y2) with
              | (Json5TokenKindRightCurlyBracket,_) -> Ok(Json5Object(List.reverse ((tag,value)::stack)), y2::ys)
              | (Json5TokenKindComma,Json5TokenKindRightCurlyBracket) -> Ok(Json5Object(List.reverse ((tag,value)::stack)), ys)
              | (Json5TokenKindComma,_) -> parse-object ((tag,value)::stack) (y2::ys)
              | _ -> Err((|token = Some(y1); desc = `unexpected token`;|))
            )
          )
        )
        | (Json5TokenKindValue(tag), Json5TokenKindColon) -> (
          match parse-value ys with
          | Err(e) -> Err(e)
          | Ok(value, lst) -> (
            match lst with
            | [] -> Err((|token = None; desc = `eof`;|))
            | [y] -> (
              match Token.data y with
              | Json5TokenKindRightCurlyBracket -> Ok(Json5Object(List.reverse ((tag,value)::stack)), [])
              | _ -> Err((|token = Some(y); desc = `unexpected token`;|))
            )
            | y1::y2::ys -> (
              match (Token.data y1, Token.data y2) with
              | (Json5TokenKindRightCurlyBracket,_) -> Ok(Json5Object(List.reverse ((tag,value)::stack)), y2::ys)
              | (Json5TokenKindComma,Json5TokenKindRightCurlyBracket) -> Ok(Json5Object(List.reverse ((tag,value)::stack)), ys)
              | (Json5TokenKindComma,_) -> parse-object ((tag,value)::stack) (y2::ys)
              | _ -> Err((|token = Some(y1); desc = `unexpected token`;|))
            )
          )
        )
        | _ -> Err((|token = None; desc = ` `;|))
      )
      | _ -> Err((|token = None; desc = ` `;|))
    )
  )


and parse-value token-lst =
  match token-lst with
  | [] -> Err((|token = None; desc = ` `;|))
  | x::xs -> (
    match Token.data x with
    | Json5TokenKindNull -> Ok(Json5Null, xs)
    | Json5TokenKindTrue -> Ok(Json5Bool(true), xs)
    | Json5TokenKindFalse -> Ok(Json5Bool(false), xs)
    | Json5TokenKindInt(n) -> Ok(Json5Int(n), xs)
    | Json5TokenKindFloat(fl) -> Ok(Json5Float(fl), xs)
    | Json5TokenKindNaN -> Ok(Json5NaN, xs)
    | Json5TokenKindInfinity -> Ok(Json5Infinity, xs)
    | Json5TokenKindNegInfinity -> Ok(Json5NegInfinity, xs)
    | Json5TokenKindString(str) -> Ok(Json5String(str), xs)
    | Json5TokenKindLeftSquareBracket -> parse-array [] xs
    | Json5TokenKindLeftCurlyBracket -> parse-object [] xs
    | _ -> Err((|token = Some(x); desc = `unexpected token`;|))
  )


let parse json-string =
  let json-unicode-lst = string-explode json-string in
  let token-lst-opt = lex [] Token.initial-position json-unicode-lst in
  match token-lst-opt with
  | None -> Err((|token = None; desc = ` `;|))
  | Some(token-lst) -> (
    match parse-value token-lst with
    | Err(e) -> Err(e)
    | Ok(json, []) -> Ok(json)
    | _ -> Err((|token = None; desc = ` `;|))
  )





let is-null json =
  match json with
  | Json5Null -> true
  | _ -> false

let is-bool json =
  match json with
  | Json5Bool(_) -> true
  | _ -> false
let as-bool json =
  match json with
  | Json5Bool(b) -> Some(b)
  | _ -> None

let is-int json =
  match json with
  | Json5Int(_) -> true
  | _ -> false
let as-int json =
  match json with
  | Json5Int(i) -> Some(i)
  | _ -> None

let is-float json =
  match json with
  | Json5Float(_) -> true
  | _ -> false
let as-float json =
  match json with
  | Json5Float(f) -> Some(f)
  | _ -> None

let is-nan json =
  match json with
  | Json5NaN -> true
  | _ -> false
let is-infinity json =
  match json with
  | Json5Infinity -> true
  | _ -> false
let is-neg-infinity json =
  match json with
  | Json5NegInfinity -> true
  | _ -> false

let is-string json =
  match json with
  | Json5String(_) -> true
  | _ -> false
let as-string json =
  match json with
  | Json5String(s) -> Some(s)
  | _ -> None

let is-array json =
  match json with
  | Json5Array(_) -> true
  | _ -> false
let as-array json =
  match json with
  | Json5Array(a) -> Some(a)
  | _ -> None

let is-object json =
  match json with
  | Json5Object(_) -> true
  | _ -> false
let as-object json =
  match json with
  | Json5Object(o) -> Some(o)
  | _ -> None


let-rec escape-string stack unicode-lst =
  match unicode-lst with
  | [] -> stack
  | x::xs -> (
    match x with
    | 0x0022 -> escape-string (stack ^ `\"`) xs
    | 0x005C -> escape-string (stack ^ `\\`) xs
    | 0x002F -> escape-string (stack ^ `\/`) xs
    | 0x0008 -> escape-string (stack ^ `\b`) xs
    | 0x000C -> escape-string (stack ^ `\f`) xs
    | 0x000A -> escape-string (stack ^ `\n`) xs
    | 0x000D -> escape-string (stack ^ `\r`) xs
    | 0x0000 -> escape-string (stack ^ `\u0000`) xs
    | 0x0001 -> escape-string (stack ^ `\u0001`) xs
    | 0x0002 -> escape-string (stack ^ `\u0002`) xs
    | 0x0003 -> escape-string (stack ^ `\u0003`) xs
    | 0x0004 -> escape-string (stack ^ `\u0004`) xs
    | 0x0005 -> escape-string (stack ^ `\u0005`) xs
    | 0x0006 -> escape-string (stack ^ `\u0006`) xs
    | 0x0007 -> escape-string (stack ^ `\u0007`) xs
    | 0x0009 -> escape-string (stack ^ `\u0009`) xs
    | 0x000B -> escape-string (stack ^ `\u000B`) xs
    | 0x000E -> escape-string (stack ^ `\u000E`) xs
    | 0x000F -> escape-string (stack ^ `\u000F`) xs
    | 0x0010 -> escape-string (stack ^ `\u0010`) xs
    | 0x0011 -> escape-string (stack ^ `\u0011`) xs
    | 0x0012 -> escape-string (stack ^ `\u0012`) xs
    | 0x0013 -> escape-string (stack ^ `\u0013`) xs
    | 0x0014 -> escape-string (stack ^ `\u0014`) xs
    | 0x0015 -> escape-string (stack ^ `\u0015`) xs
    | 0x0016 -> escape-string (stack ^ `\u0016`) xs
    | 0x0017 -> escape-string (stack ^ `\u0017`) xs
    | 0x0018 -> escape-string (stack ^ `\u0018`) xs
    | 0x0019 -> escape-string (stack ^ `\u0019`) xs
    | 0x001A -> escape-string (stack ^ `\u001A`) xs
    | 0x001B -> escape-string (stack ^ `\u001B`) xs
    | 0x001C -> escape-string (stack ^ `\u001C`) xs
    | 0x001D -> escape-string (stack ^ `\u001D`) xs
    | 0x001E -> escape-string (stack ^ `\u001E`) xs
    | 0x001F -> escape-string (stack ^ `\u001F`) xs
    | _ -> escape-string (stack ^ (string-unexplode[x])) xs
  )

let-rec to-string json5 =
  match json5 with
  | Json5Int(n) -> arabic n
  | Json5Float(fl) -> (
    let s = show-float fl in
    match (s |> string-explode |> List.reverse) with
    | 0x002E::_ -> s^`0`
    | _ -> s
  )
  | Json5String(str) -> `"` ^ (escape-string String.empty (string-explode str)) ^ `"`
  | Json5Null -> `null`
  | Json5NaN -> `NaN`
  | Json5Infinity -> `Infinity`
  | Json5NegInfinity -> `-Infinity`
  | Json5Bool(true) -> `true`
  | Json5Bool(false) -> `false`
  | Json5Array(array) -> (
    array
    |> List.map to-string
    |> List.fold-lefti (fun i s1 s2 -> (
      if i == 0 then
        s2
      else
        s1 ^ `,` ^ s2
    )) String.empty
    |> (fun s -> `[` ^ s ^ `]`)
  )
  | Json5Object(object) -> (
    object
    |> List.map (fun (tag, json) -> (
        let json-str = to-string json in
        `"` ^ tag ^ `"` ^ `:` ^ json-str
      ))
    |> List.fold-lefti (fun i s1 s2 -> (
      if i == 0 then
        s2
      else
        s1 ^ `,` ^ s2
    )) String.empty
    |> (fun s -> `{` ^ s ^ `}`)
  )

end

@require: stdjabook
@require: itemize
@require: code

@require: base/base

%@require: json/json
%@require: json/json5
@import: ../src/json
@import: ../src/json5


let json-str = ```
{
  "foo" : "foo",
  "bar" : {
    "bar1" : [1,2,3],
    "bar2" : [
      {"baz1" : 123, "baz2" : -1.2},
      {"baz3" : null, "baz4" : true}
    ]
  }
}
```
let json = json-str |> JSON.parse |> Result.unwrap
let json-test-str = JSON.to-string json

let json5-str = `
{
  // comments
  "foo" : "foo",
  /*
    block comments
    / hoge * fuga/
  */
  bar : {
    "bar1" : [1,2,3,],
    "bar2" : [
      {"baz1" : 123, "baz2" : -Infinity},
      {"baz3" : null, "baz4" : true, "baz" : 0xabcd}
    ]
  },
}
`
let json5 = json5-str |> JSON5.parse |> Result.unwrap
let json5-test-str = JSON5.to-string json5

in

document (|
  title = {json Manual};
  author = {Naoki Kaneko};
  show-title = true;
  show-toc = false;
|) '<
  +p{このライブラリはJSON文字列をパースしたり、逆にJSONデータ構造をJSON文字列に変換したりするものです。}
  +p{`json.satyg`というファイルでは\href(`https://www.json.org/json-en.html`){JSON}の規格に準拠したパーサと文字列化関数が定義されています。そして、`json5.satyg`というファイルでは\href(`https://json5.org/`){JSON5}の規格に準拠したパーサと文字列化関数が定義されています。}
  +section {`json.satyg`で定義されているもの} <
    +p{グローバル空間に
\d-code(```
type json =
  | JsonNull
  | JsonBool of bool
  | JsonInt of int
  | JsonFloat of float
  | JsonString of string
  | JsonArray of json list
  | JsonObject of (string * json) list
```);が定義されています。上から順に
      \enumerate{
        * `JsonNull`：`null`を表す
        * `JsonBool`：`true`もしくは`false`を格納する
        * `JsonInt`：自然数を格納する
        * `JsonFloat`：小数を格納する
        * `JsonString`：文字列を格納する
        * `JsonArray`：リストを格納する
        * `JsonObject`：objectを格納する
      }
      という役割を持っています。
    }
    +p{`json.satyg`では`JSON`モジュールが定義されています。}
    +p{`JSON`モジュールでは`parse : json json-parse-error result`という関数（ここでの`result`は`satysfi-base`の`base.satyg`で定義されているもの）と`to-string : json -> string`という関数の2つが公開されています。}
  +code(```
let json-str = `
{
  "foo" : "foo",
  "bar" : {
    "bar1" : [1,2,3],
    "bar2" : [
      {"baz1" : 123, "baz2" : -1.2},
      {"baz3" : null, "baz4" : true}
    ]
  }
}
`
let json = json-str |> JSON.parse |> Result.unwrap
let str = JSON.to-string json
  ```);
  +p{というコードがあったとき、`str`は\code(json-test-str);になります。}
  >
  +section {`json5.satyg`で定義されているもの} <
    +p{グローバル空間に
\d-code(```
type json5 =
  | Json5Null
  | Json5Bool of bool
  | Json5Int of int
  | Json5Float of float
  | Json5NaN
  | Json5Infinity
  | Json5NegInfinity
  | Json5String of string
  | Json5Array of json5 list
  | Json5Object of (string * json5) list
```);が定義されています。上から順に
      \enumerate{
        * `Json5Null`：`null`を表す
        * `Json5Bool`：`true`もしくは`false`を格納する
        * `Json5Int`：自然数を格納する
        * `Json5Float`：小数を格納する
        * `Json5NaN`：`NaN`を表す
        * `Json5Infinity`：正の無限大を表す
        * `Json5NegInfinity`：負の無限大を表す
        * `Json5String`：文字列を格納する
        * `Json5Array`：リストを格納する
        * `Json5Object`：objectを格納する
      }
      という役割を持っています。
    }
    +p{`json5.satyg`では`JSON5`モジュールが定義されています。}
    +p{`JSON5`モジュールでは`parse : json5 json5-parse-error result`という関数（ここでの`result`は`satysfi-base`の`base.satyg`で定義されているもの）と`to-string : json -> string`という関数の2つが公開されています。}
  +code(```
let json5-str = `
{
  // comments
  "foo" : "foo",
  /*
    block comments
    / hoge * fuga/
  */
  bar : {
    "bar1" : [1,2,3,],
    "bar2" : [
      {"baz1" : 123, "baz2" : -Infinity},
      {"baz3" : null, "baz4" : true, "baz" : 0xabcd}
    ]
  },
}
`
let json5 = json5-str |> JSON5.parse |> Result.unwrap
let str = JSON5.to-string json5
  ```);
  +p{というコードがあったとき、`str`は\code(json5-test-str);になります。}
  >
  +section {必要なバージョンや依存など}<
    +p{`satysfi-dist`と`satysfi-base`の二つに依存します。また、必要なバージョンは\SATySFi;のv0.0.5以上が必要になります。}
  >
>
